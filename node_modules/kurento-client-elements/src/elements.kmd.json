{
  "name": "elements",
  "version": "6.13.2-dev",
  "kurentoVersion": "^6.7.0",
  "imports": [
    {
      "name": "core",
      "version": "^6.7.0",
      "mavenVersion": "[6.7.0,7.0.0-SNAPSHOT)",
      "npmVersion": ">=6.7.0 <7.0.0"
    }
  ],
  "code": {
    "kmd": {
      "java": {
        "mavenGroupId": "org.kurento",
        "mavenArtifactId": "kms-api-elements",
        "mavenVersion": "6.13.2-SNAPSHOT"
      }
    },
    "api": {
      "java": {
        "packageName": "org.kurento.client",
        "mavenGroupId": "org.kurento",
        "mavenArtifactId": "kurento-client",
        "mavenVersion": "6.13.2-SNAPSHOT"
      },
      "js": {
        "nodeName": "kurento-client-elements",
        "npmDescription": "JavaScript Client API for Kurento Media Server",
        "npmGit": "Kurento/kurento-client-elements-js",
        "npmVersion": "Kurento/kurento-client-elements-js"
      }
    },
    "implementation": {
      "cppNamespace": "kurento",
      "lib": "libkmselements"
    }
  },
  "remoteClasses": [
    {
      "name": "AlphaBlending",
      "doc": "A :rom:cls:`Hub` that mixes the :rom:attr:`MediaType.AUDIO` stream of its connected sources and constructs one output with :rom:attr:`MediaType.VIDEO` streams of its connected sources into its sink",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create for the given pipeline"
      },
      "methods": [
        {
          "params": [
            {
              "name": "source",
              "doc": "The reference to the HubPort setting as master port",
              "type": "HubPort"
            },
            {
              "name": "zOrder",
              "doc": "The order in z to draw the master image",
              "type": "int"
            }
          ],
          "name": "setMaster",
          "doc": "Sets the source port that will be the master entry to the mixer"
        },
        {
          "params": [
            {
              "name": "relativeX",
              "doc": "The x position relative to the master port. Values from 0 to 1 are accepted. The value 0, indicates the coordinate 0 in the master image.",
              "type": "float"
            },
            {
              "name": "relativeY",
              "doc": "The y position relative to the master port. Values from 0 to 1 are accepted. The value 0, indicates the coordinate 0 in the master image.",
              "type": "float"
            },
            {
              "name": "zOrder",
              "doc": "The order in z to draw the images. The greatest value of z is in the top.",
              "type": "int"
            },
            {
              "name": "relativeWidth",
              "doc": "The image width relative to the master port width. Values from 0 to 1 are accepted.",
              "type": "float"
            },
            {
              "name": "relativeHeight",
              "doc": "The image height relative to the master port height. Values from 0 to 1 are accepted.",
              "type": "float"
            },
            {
              "name": "port",
              "doc": "The reference to the confingured port.",
              "type": "HubPort"
            }
          ],
          "name": "setPortProperties",
          "doc": "Configure the blending mode of one port."
        }
      ]
    },
    {
      "name": "Composite",
      "doc": "A :rom:cls:`Hub` that mixes the :rom:attr:`MediaType.AUDIO` stream of its connected sources and constructs a grid with the :rom:attr:`MediaType.VIDEO` streams of its connected sources into its sink",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create for the given pipeline"
      }
    },
    {
      "name": "Dispatcher",
      "doc": "A :rom:cls:`Hub` that allows routing between arbitrary port pairs",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create a :rom:cls:`Dispatcher` belonging to the given pipeline."
      },
      "methods": [
        {
          "params": [
            {
              "name": "source",
              "doc": "Source port to be connected",
              "type": "HubPort"
            },
            {
              "name": "sink",
              "doc": "Sink port to be connected",
              "type": "HubPort"
            }
          ],
          "name": "connect",
          "doc": "Connects each corresponding :rom:enum:`MediaType` of the given source port with the sink port."
        }
      ]
    },
    {
      "name": "DispatcherOneToMany",
      "doc": "A :rom:cls:`Hub` that sends a given source to all the connected sinks",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create a :rom:cls:`DispatcherOneToMany` belonging to the given pipeline."
      },
      "methods": [
        {
          "params": [
            {
              "name": "source",
              "doc": "source to be broadcasted",
              "type": "HubPort"
            }
          ],
          "name": "setSource",
          "doc": "Sets the source port that will be connected to the sinks of every :rom:cls:`HubPort` of the dispatcher"
        },
        {
          "params": [],
          "name": "removeSource",
          "doc": "Remove the source port and stop the media pipeline."
        }
      ]
    },
    {
      "name": "HttpEndpoint",
      "doc": "Endpoint that enables Kurento to work as an HTTP server, allowing peer HTTP clients to access media.",
      "abstract": true,
      "extends": "SessionEndpoint",
      "methods": [
        {
          "params": [],
          "return": {
            "type": "String",
            "doc": "The url as a String"
          },
          "name": "getUrl",
          "doc": "Obtains the URL associated to this endpoint"
        }
      ]
    },
    {
      "name": "HttpPostEndpoint",
      "doc": "An :rom:cls:`HttpPostEndpoint` contains SINK pads for AUDIO and VIDEO, which provide access to an HTTP file upload function\n\n   This type of endpoint provide unidirectional communications. Its :rom:cls:`MediaSources <MediaSource>` are accessed through the :term:`HTTP` POST method.",
      "extends": "HttpEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "disconnectionTimeout",
            "doc": "This is the time that an http endpoint will wait for a reconnection, in case an HTTP connection is lost.",
            "type": "int",
            "optional": true,
            "defaultValue": 2
          },
          {
            "name": "useEncodedMedia",
            "doc": "Feed the input media as-is to the Media Pipeline, instead of first decoding it.\n              <p>\n              When this property is not enabled, the input media gets always decoded into a raw format before being processed by the rest of the Media Pipeline; this is done to ensure that Kurento is able to keep track of lost keyframes among other quality-control measurements. Of course, having to decode the media has a cost in terms of CPU usage, but ensures that the output streaming will be robust and reliable.\n              </p>\n              <p>\n              When this property is enabled, the explained behavior gets disabled. Instead, The endpoint will provide any input media directly to the Media Pipeline, without prior decoding. Enabling this mode of operation could have a severe effect on stability, because lost video keyframes will not be regenerated; however, avoiding a full cycle of decoding and encoding can be very useful for certain applications, because it improves performance by greatly reducing the CPU processing load.\n              </p>\n              <p>\n              Keep in mind that if this property is enabled, the original source media MUST already have an encoding format which is compatible with the destination target. For example: given a pipeline which uses this endpoint to read a file and then streams it to a WebRTC browser such as Chrome, then the file must already be encoded with a VP8 or H.264 codec profile which Chrome is able to decode. Note that for this example, most browsers don't support ANY combination of H.264 encoding options; instead, they tend to support only a very specific subset of the codec features (also known as 'profiles').\n              </p>\n              <p>\n              We strongly recommend to avoid using this option, because correct behavior cannot be guaranteed.\n              </p>\n              ",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": "Builder for the :rom:cls:`HttpPostEndpoint`."
      },
      "events": [
        "EndOfStream"
      ]
    },
    {
      "name": "Mixer",
      "doc": "A :rom:cls:`Hub` that allows routing of video between arbitrary port pairs and mixing of audio among several ports",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the Mixer belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create a :rom:cls:`Mixer` belonging to the given pipeline."
      },
      "methods": [
        {
          "params": [
            {
              "name": "media",
              "doc": "The sort of media stream to be connected",
              "type": "MediaType"
            },
            {
              "name": "source",
              "doc": "Source port to be connected",
              "type": "HubPort"
            },
            {
              "name": "sink",
              "doc": "Sink port to be connected",
              "type": "HubPort"
            }
          ],
          "name": "connect",
          "doc": "Connects each corresponding :rom:enum:`MediaType` of the given source port with the sink port."
        },
        {
          "params": [
            {
              "name": "media",
              "doc": "The sort of media stream to be disconnected",
              "type": "MediaType"
            },
            {
              "name": "source",
              "doc": "Audio source port to be disconnected",
              "type": "HubPort"
            },
            {
              "name": "sink",
              "doc": "Audio sink port to be disconnected",
              "type": "HubPort"
            }
          ],
          "name": "disconnect",
          "doc": "Disonnects each corresponding :rom:enum:`MediaType` of the given source port from the sink port."
        }
      ]
    },
    {
      "name": "PlayerEndpoint",
      "doc": "\n      <p>\n      Retrieves content from seekable or non-seekable sources, and injects them into :term:`KMS`, so they can be delivered to any Filter or Endpoint in the same MediaPipeline. Following URI schemas are supported:\n      <ul>\n        <li>\n          Files: Mounted in the local file system.\n          <ul><li>file:///path/to/file</li></ul>\n        </li>\n        <li>\n          RTSP: Those of IP cameras would be a good example.\n          <ul>\n            <li>rtsp://<server-ip></li>\n            <li>rtsp://username:password@<server-ip></li>\n          </ul>\n        </li>\n        <li>\n          HTTP: Any file available in an HTTP server\n          <ul>\n            <li>http(s)://<server-ip>/path/to/file</li>\n            <li>http(s)://username:password@<server-ip>/path/to/file</li>\n          </ul>\n        </li>\n      </ul>\n      </p>\n      <p>\n      For the player to stream the contents of the file, the server must have access to the resource. In case of local files, the user running the process must have read permissions over the file. For network resources, the path to the resource must be accessible: IP and port access not blocked, correct credentials, etc.The resource location can’t be changed after the player is created, and a new player should be created for streaming a different resource.\n      </p>\n      <p>\n      The list of valid operations is\n      <ul>\n        <li>*play*: starts streaming media. If invoked after pause, it will resume playback.</li>\n        <li>*stop*: stops streaming media. If play is invoked afterwards, the file will be streamed from the beginning.</li>\n        <li>*pause*: pauses media streaming. Play must be invoked in order to resume playback.</li>\n        <li>*seek*: If the source supports “jumps” in the timeline, then the PlayerEndpoint can\n          <ul>\n            <li>*setPosition*: allows to set the position in the file.</li>\n            <li>*getPosition*: returns the current position being streamed.</li>\n          </ul>\n        </li>\n      </ul>\n      </p>\n      <p>\n      <h2>Events fired:</h2>\n      <ul><li>EndOfStreamEvent: If the file is streamed completely.</li></ul>\n      </p>\n      ",
      "extends": "UriEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "The :rom:cls:`MediaPipeline` this PlayerEndpoint belongs to.",
            "type": "MediaPipeline"
          },
          {
            "name": "uri",
            "doc": "URI pointing to the video. It has to be accessible to the KMS process.\n              <ul>\n                <li>Local resources: The user running the Kurento Media Server must have read permission over the file.</li>\n                <li>Remote resources: Must be accessible from the server where the media server is running.</li>\n              </ul>",
            "type": "String"
          },
          {
            "name": "useEncodedMedia",
            "doc": "Feed the input media as-is to the Media Pipeline, instead of first decoding it.\n              <p>\n              When this property is not enabled, the input media gets always decoded into a raw format before being processed by the rest of the Media Pipeline; this is done to ensure that Kurento is able to keep track of lost keyframes among other quality-control measurements. Of course, having to decode the media has a cost in terms of CPU usage, but ensures that the output streaming will be robust and reliable.\n              </p>\n              <p>\n              When this property is enabled, the explained behavior gets disabled. Instead, The endpoint will provide any input media directly to the Media Pipeline, without prior decoding. Enabling this mode of operation could have a severe effect on stability, because lost video keyframes will not be regenerated; however, avoiding a full cycle of decoding and encoding can be very useful for certain applications, because it improves performance by greatly reducing the CPU processing load.\n              </p>\n              <p>\n              Keep in mind that if this property is enabled, the original source media MUST already have an encoding format which is compatible with the destination target. For example: given a pipeline which uses this endpoint to read a file and then streams it to a WebRTC browser such as Chrome, then the file must already be encoded with a VP8 or H.264 codec profile which Chrome is able to decode. Note that for this example, most browsers don't support ANY combination of H.264 encoding options; instead, they tend to support only a very specific subset of the codec features (also known as 'profiles').\n              </p>\n              <p>\n              We strongly recommend to avoid using this option, because correct behavior cannot be guaranteed.\n              </p>\n              ",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          },
          {
            "name": "networkCache",
            "doc": "When using RTSP sources: Amount of milliseconds to buffer",
            "type": "int",
            "optional": true,
            "defaultValue": 2000
          }
        ],
        "doc": "Create a PlayerEndpoint"
      },
      "properties": [
        {
          "name": "videoInfo",
          "doc": "Returns info about the source being played",
          "type": "VideoInfo",
          "readOnly": true
        },
        {
          "name": "elementGstreamerDot",
          "doc": "Returns the GStreamer DOT string for this element's private pipeline",
          "type": "String",
          "readOnly": true
        },
        {
          "name": "position",
          "doc": "Get or set the actual position of the video in ms. .. note:: Setting the position only works for seekable videos",
          "type": "int64"
        }
      ],
      "methods": [
        {
          "params": [],
          "name": "play",
          "doc": "Starts reproducing the media, sending it to the :rom:cls:`MediaSource`. If the endpoint\n\n          has been connected to other endpoints, those will start receiving media."
        }
      ],
      "events": [
        "EndOfStream"
      ]
    },
    {
      "name": "RecorderEndpoint",
      "doc": "Provides the functionality to store contents.\n<p>\n  The recorder can store in local files or in a network resource. It receives a\n  media stream from another :rom:cls:`MediaElement` (i.e. the source), and\n  stores it in the designated location.\n</p>\n<p>\n  The following information has to be provided in order to create a\n  RecorderEndpoint, and cannot be changed afterwards:\n</p>\n<ul>\n  <li>\n    URI of the resource where media will be stored. Following schemas are\n    supported:\n    <ul>\n      <li>\n        Files: mounted in the local file system.\n        <ul>\n          <li><code>file:///path/to/file</code></li>\n        </ul>\n      </li>\n      <li>\n        HTTP: Requires the server to support method PUT\n        <ul>\n          <li><code>http(s)://{server-ip}/path/to/file</code></li>\n          <li>\n            <code>http(s)://username:password@{server-ip}/path/to/file</code>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>\n    Relative URIs (with no schema) are supported. They are completed prepending\n    a default URI defined by property <i>defaultPath</i>. This property is\n    defined in the configuration file\n    <i>/etc/kurento/modules/kurento/UriEndpoint.conf.ini</i>, and the default\n    value is <code>file:///var/lib/kurento/</code>\n  </li>\n  <li>\n    The media profile (:rom:attr:`MediaProfileSpecType`) used to store the file.\n    This will determine the encoding. See below for more details about media\n    profile.\n  </li>\n  <li>\n    Optionally, the user can select if the endpoint will stop processing once\n    the EndOfStream event is detected.\n  </li>\n</ul>\n<p>\n  RecorderEndpoint requires access to the resource where stream is going to be\n  recorded. If it's a local file (<code>file://</code>), the system user running\n  the media server daemon (kurento by default), needs to have write permissions\n  for that URI. If it's an HTTP server, it must be accessible from the machine\n  where media server is running, and also have the correct access rights.\n  Otherwise, the media server won't be able to store any information, and an\n  :rom:evt:`Error` will be fired. Please note that if you haven't subscribed to\n  that type of event, you can be left wondering why your media is not being\n  saved, while the error message was ignored.\n</p>\n<p>\n  The media profile is quite an important parameter, as it will determine\n  whether the server needs to perform on-the-fly transcoding of the media. If\n  the input stream codec if not compatible with the selected media profile, the\n  media will be transcoded into a suitable format. This will result in a higher\n  CPU load and will impact overall performance of the media server.\n</p>\n<p>\n  For example: Say that your pipeline will receive <b>VP8</b>-encoded video from\n  WebRTC, and sends it to a RecorderEndpoint; depending on the format\n  selected...\n</p>\n<ul>\n  <li>\n    WEBM: The input codec is the same as the recording format, so no transcoding\n    will take place.\n  </li>\n  <li>\n    MP4: The media server will have to transcode from <b>VP8</b> to <b>H264</b>.\n    This will raise the CPU load in the system.\n  </li>\n  <li>\n    MKV: Again, video must be transcoded from <b>VP8</b> to <b>H264</b>, which\n    means more CPU load.\n  </li>\n</ul>\n<p>\n  From this you can see how selecting the correct format for your application is\n  a very important decision.\n</p>\n<p>\n  Recording will start as soon as the user invokes the record method. The\n  recorder will then store, in the location indicated, the media that the source\n  is sending to the endpoint's sink. If no media is being received, or no\n  endpoint has been connected, then the destination will be empty. The recorder\n  starts storing information into the file as soon as it gets it.\n</p>\n<p>\n  When another endpoint is connected to the recorder, by default both AUDIO and\n  VIDEO media types are expected, unless specified otherwise when invoking the\n  connect method. Failing to provide both types, will result in teh recording\n  buffering the received media: it won't be written to the file until the\n  recording is stopped. This is due to the recorder waiting for the other type\n  of media to arrive, so they are synchronized.\n</p>\n<p>\n  The source endpoint can be hot-swapped, while the recording is taking place.\n  The recorded file will then contain different feeds. When switching video\n  sources, if the new video has different size, the recorder will retain the\n  size of the previous source. If the source is disconnected, the last frame\n  recorded will be shown for the duration of the disconnection, or until the\n  recording is stopped.\n</p>\n<p>\n  It is recommended to start recording only after media arrives, either to the\n  endpoint that is the source of the media connected to the recorder, to the\n  recorder itself, or both. Users may use the MediaFlowIn and MediaFlowOut\n  events, and synchronize the recording with the moment media comes in. In any\n  case, nothing will be stored in the file until the first media packets arrive.\n</p>\n<p>\n  Stopping the recording process is done through the stopAndWait method, which\n  will return only after all the information was stored correctly. If the file\n  is empty, this means that no media arrived at the recorder.\n</p>\n      ",
      "extends": "UriEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "uri",
            "doc": "URI where the recording will be stored. It has to be accessible to the KMS process.\n              <ul>\n                <li>Local server resources: The user running the Kurento Media Server must have write permission over the file.</li>\n                <li>Network resources: Must be accessible from the server where the media server is running.</li>\n              </ul>",
            "type": "String"
          },
          {
            "name": "mediaProfile",
            "doc": "Sets the media profile used for recording. If the profile is different than the one being recieved at the sink pad, media will be trnascoded, resulting in a higher CPU load. For instance, when recording a VP8 encoded video from a WebRTC endpoint in MP4, the load is higher that when recording in WEBM.",
            "type": "MediaProfileSpecType",
            "optional": true,
            "defaultValue": "WEBM"
          },
          {
            "name": "stopOnEndOfStream",
            "doc": "Forces the recorder endpoint to finish processing data when an :term:`EOS` is detected in the stream",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": ""
      },
      "methods": [
        {
          "params": [],
          "name": "record",
          "doc": "Starts storing media received through the sink pad."
        },
        {
          "params": [],
          "name": "stopAndWait",
          "doc": "Stops recording and does not return until all the content has been written to the selected uri. This can cause timeouts on some clients if there is too much content to write, or the transport is slow"
        }
      ],
      "events": [
        "Recording",
        "Paused",
        "Stopped"
      ]
    },
    {
      "name": "RtpEndpoint",
      "doc": "Endpoint that provides bidirectional content delivery capabilities with remote networked peers through RTP or SRTP protocol. An :rom:cls:`RtpEndpoint` contains paired sink and source :rom:cls:`MediaPad` for audio and video. This endpoint inherits from :rom:cls:`BaseRtpEndpoint`.\n      </p>\n      <p>\n      In order to establish an RTP/SRTP communication, peers engage in an SDP negotiation process, where one of the peers (the offerer) sends an offer, while the other peer (the offeree) responds with an answer. This endpoint can function in both situations\n      <ul style='list-style-type:circle'>\n        <li>\n          As offerer: The negotiation process is initiated by the media server\n          <ul>\n            <li>KMS generates the SDP offer through the generateOffer method. This offer must then be sent to the remote peer (the offeree) through the signaling channel, for processing.</li>\n            <li>The remote peer process the Offer, and generates an Answer to this offer. The Answer is sent back to the media server.</li>\n            <li>Upon receiving the Answer, the endpoint must invoke the processAnswer method.</li>\n          </ul>\n        </li>\n        <li>\n          As offeree: The negotiation process is initiated by the remote peer\n          <ul>\n            <li>The remote peer, acting as offerer, generates an SDP offer and sends it to the WebRTC endpoint in Kurento.</li>\n            <li>The endpoint will process the Offer invoking the processOffer method. The result of this method will be a string, containing an SDP Answer.</li>\n            <li>The SDP Answer must be sent back to the offerer, so it can be processed.</li>\n          </ul>\n        </li>\n      </ul>\n      </p>\n      <p>\n      In case of unidirectional connections (i.e. only one peer is going to send media), the process is more simple, as only the emitter needs to process an SDP. On top of the information about media codecs and types, the SDP must contain the IP of the remote peer, and the port where it will be listening. This way, the SDP can be mangled without needing to go through the exchange process, as the receiving peer does not need to process any answer.\n      </p>\n      <p>\n      The user can set some bandwidth limits that will be used during the negotiation process.\n      The default bandwidth range of the endpoint is 100kbps-500kbps, but it can be changed separately for input/output directions and for audio/video streams.\n      <ul style='list-style-type:circle'>\n        <li>\n          Input bandwidth control mechanism: Configuration interval used to inform remote peer the range of bitrates that can be pushed into this RtpEndpoint object. These values are announced in the SDP.\n          <ul>\n            <li>\n              setMaxVideoRecvBandwidth: sets Max bitrate limits expected for received video stream.\n            </li>\n            <li>\n              setMaxAudioRecvBandwidth: sets Max bitrate limits expected for received audio stream.\n            </li>\n          </ul>\n        </li>\n        <li>\n          Output bandwidth control mechanism: Configuration interval used to control bitrate of the output video stream sent to remote peer. Remote peers can also announce bandwidth limitation in their SDPs (through the b=<modifier>:<value> tag). Kurento will always enforce bitrate limitations specified by the remote peer over internal configurations.\n          <ul>\n            <li>\n              setMaxVideoSendBandwidth: sets Max bitrate limits for video sent to remote peer.\n            </li>\n            <li>\n              setMinVideoSendBandwidth: sets Min bitrate limits for audio sent to remote peer.\n            </li>\n          </ul>\n        </li>\n      </ul>\n      All bandwidth control parameters must be changed before the SDP negotiation takes place, and can't be modified afterwards.\n      TODO: What happens if the b=as tag form the SDP has a lower value than the one set in setMinVideoSendBandwidth?\n      </p>\n      <p>\n      Take into consideration that setting a too high upper limit for the output bandwidth can be a reason for the local network connection to be overflooded.\n      </p>\n      ",
      "extends": "BaseRtpEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "crypto",
            "doc": "SDES-type param. If present, this parameter indicates that the communication will be encrypted. By default no encryption is used.",
            "type": "SDES",
            "optional": true,
            "defaultValue": {}
          },
          {
            "name": "useIpv6",
            "doc": "This configures the endpoint to use IPv6 instead of IPv4.",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": "Builder for the :rom:cls:`RtpEndpoint`"
      },
      "events": [
        "OnKeySoftLimit"
      ]
    },
    {
      "name": "WebRtcEndpoint",
      "doc": "Control interface for Kurento WebRTC endpoint.\n<p>\n  This endpoint is one side of a peer-to-peer WebRTC communication, being the\n  other peer a WebRTC capable browser -using the RTCPeerConnection API-, a\n  native WebRTC app or even another Kurento Media Server.\n</p>\n<p>\n  In order to establish a WebRTC communication, peers engage in an SDP\n  negotiation process, where one of the peers (the offerer) sends an offer,\n  while the other peer (the offeree) responds with an answer. This endpoint can\n  function in both situations\n</p>\n<ul>\n  <li>\n    As offerer: The negotiation process is initiated by the media server\n    <ul>\n      <li>\n        KMS generates the SDP offer through the\n        <code>generateOffer</code> method. This <i>offer</i> must then be sent\n        to the remote peer (the offeree) through the signaling channel, for\n        processing.\n      </li>\n      <li>\n        The remote peer processes the <i>offer</i>, and generates an\n        <i>answer</i>. The <i>answer</i> is sent back to the media server.\n      </li>\n      <li>\n        Upon receiving the <i>answer</i>, the endpoint must invoke the\n        <code>processAnswer</code> method.\n      </li>\n    </ul>\n  </li>\n  <li>\n    As offeree: The negotiation process is initiated by the remote peer\n    <ul>\n      <li>\n        The remote peer, acting as offerer, generates an SDP <i>offer</i> and\n        sends it to the WebRTC endpoint in Kurento.\n      </li>\n      <li>\n        The endpoint will process the <i>offer</i> invoking the\n        <code>processOffer</code> method. The result of this method will be a\n        string, containing an SDP <i>answer</i>.\n      </li>\n      <li>\n        The SDP <i>answer</i> must be sent back to the offerer, so it can be\n        processed.\n      </li>\n    </ul>\n  </li>\n</ul>\n<p>\n  SDPs are sent without ICE candidates, following the Trickle ICE optimization.\n  Once the SDP negotiation is completed, both peers proceed with the ICE\n  discovery process, intended to set up a bidirectional media connection. During\n  this process, each peer\n</p>\n<ul>\n  <li>\n    Discovers ICE candidates for itself, containing pairs of IPs and ports.\n  </li>\n  <li>\n    ICE candidates are sent via the signaling channel as they are discovered, to\n    the remote peer for probing.\n  </li>\n  <li>\n    ICE connectivity checks are run as soon as the new candidate description,\n    from the remote peer, is available.\n  </li>\n</ul>\n<p>\n  Once a suitable pair of candidates (one for each peer) is discovered, the\n  media session can start. The harvesting process in Kurento, begins with the\n  invocation of the <code>gatherCandidates</code> method. Since the whole\n  Trickle ICE purpose is to speed-up connectivity, candidates are generated\n  asynchronously. Therefore, in order to capture the candidates, the user must\n  subscribe to the event <code>IceCandidateFound</code>. It is important that\n  the event listener is bound before invoking <code>gatherCandidates</code>,\n  otherwise a suitable candidate might be lost, and connection might not be\n  established.\n</p>\n<p>\n  It's important to keep in mind that WebRTC connection is an asynchronous\n  process, when designing interactions between different MediaElements. For\n  example, it would be pointless to start recording before media is flowing. In\n  order to be notified of state changes, the application can subscribe to events\n  generated by the WebRtcEndpoint. Following is a full list of events generated\n  by WebRtcEndpoint:\n</p>\n<ul>\n  <li>\n    <code>IceComponentStateChange</code>: This event informs only about changes\n    in the ICE connection state. Possible values are:\n    <ul>\n      <li><code>DISCONNECTED</code>: No activity scheduled</li>\n      <li><code>GATHERING</code>: Gathering local candidates</li>\n      <li><code>CONNECTING</code>: Establishing connectivity</li>\n      <li><code>CONNECTED</code>: At least one working candidate pair</li>\n      <li>\n        <code>READY</code>: ICE concluded, candidate pair selection is now final\n      </li>\n      <li>\n        <code>FAILED</code>: Connectivity checks have been completed, but media\n        connection was not established\n      </li>\n    </ul>\n    The transitions between states are covered in RFC5245. It could be said that\n    it's network-only, as it only takes into account the state of the network\n    connection, ignoring other higher level stuff, like DTLS handshake, RTCP\n    flow, etc. This implies that, while the component state is\n    <code>CONNECTED</code>, there might be no media flowing between the peers.\n    This makes this event useful only to receive low-level information about the\n    connection between peers. Even more, while other events might leave a\n    graceful period of time before firing, this event fires immediately after\n    the state change is detected.\n  </li>\n  <li>\n    <code>IceCandidateFound</code>: Raised when a new candidate is discovered.\n    ICE candidates must be sent to the remote peer of the connection. Failing to\n    do so for some or all of the candidates might render the connection\n    unusable.\n  </li>\n  <li>\n    <code>IceGatheringDone</code>: Raised when the ICE harvesting process is\n    completed. This means that all candidates have already been discovered.\n  </li>\n  <li>\n    <code>NewCandidatePairSelected</code>: Raised when a new ICE candidate pair\n    gets selected. The pair contains both local and remote candidates being used\n    for a component. This event can be raised during a media session, if a new\n    pair of candidates with higher priority in the link are found.\n  </li>\n  <li><code>DataChannelOpen</code>: Raised when a data channel is open.</li>\n  <li><code>DataChannelClose</code>: Raised when a data channel is closed.</li>\n</ul>\n<p>\n  Registering to any of above events requires the application to provide a\n  callback function. Each event provides different information, so it is\n  recommended to consult the signature of the event listeners.\n</p>\n<p>\n  Flow control and congestion management is one of the most important features\n  of WebRTC. WebRTC connections start with the lowest bandwidth configured and\n  slowly ramps up to the maximum available bandwidth, or to the higher limit of\n  the exploration range in case no bandwidth limitation is detected. Notice that\n  WebRtcEndpoints in Kurento are designed in a way that multiple WebRTC\n  connections fed by the same stream share quality. When a new connection is\n  added, as it requires to start with low bandwidth, it will cause the rest of\n  connections to experience a transient period of degraded quality, until it\n  stabilizes its bitrate. This doesn't apply when transcoding is involved.\n  Transcoders will adjust their output bitrate based in bandwidth requirements,\n  but it won't affect the original stream. If an incoming WebRTC stream needs to\n  be transcoded, for whatever reason, all WebRtcEndpoints fed from transcoder\n  output will share a separate quality than the ones connected directly to the\n  original stream.\n</p>\n<p>\n  The default bandwidth range of the endpoint is\n  <strong>[100 kbps, 500 kbps]</strong>, but it can be changed separately for\n  input/output directions and for audio/video streams.\n</p>\n<p>\n  <strong>\n    Check the extended documentation of these parameters in\n    :rom:cls:`SdpEndpoint`, :rom:cls:`BaseRtpEndpoint`, and\n    :rom:ref:`RembParams`.\n  </strong>\n</p>\n<ul>\n  <li>\n    Input bandwidth: Configuration value used to inform remote peers about the\n    bitrate that can be pushed into this endpoint.\n    <ul>\n      <li>\n        <strong>{get,set}MinVideoRecvBandwidth</strong>: Minimum bitrate\n        requested on the received video stream.\n      </li>\n      <li>\n        <strong>{get,set}Max{Audio,Video}RecvBandwidth</strong>: Maximum bitrate\n        expected for the received stream.\n      </li>\n    </ul>\n  </li>\n  <li>\n    Output bandwidth: Configuration values used to control bitrate of the output\n    video stream sent to remote peers. It is important to keep in mind that\n    pushed bitrate depends on network and remote peer capabilities. Remote peers\n    can also announce bandwidth limitation in their SDPs (through the\n    <code>b={modifier}:{value}</code> tag). Kurento will always enforce bitrate\n    limitations specified by the remote peer over internal configurations.\n    <ul>\n      <li>\n        <strong>{get,set}MinVideoSendBandwidth</strong>: Minimum video bitrate\n        sent to remote peer.\n      </li>\n      <li>\n        <strong>{get,set}MaxVideoSendBandwidth</strong>: Maximum video bitrate\n        sent to remote peer.\n      </li>\n      <li>\n        <strong>RembParams.rembOnConnect</strong>: Initial local REMB bandwidth\n        estimation that gets propagated when a new endpoint is connected.\n      </li>\n    </ul>\n  </li>\n</ul>\n<p>\n  <strong>\n    All bandwidth control parameters must be changed before the SDP negotiation\n    takes place, and can't be changed afterwards.\n  </strong>\n</p>\n<p>\n  DataChannels allow other media elements that make use of the DataPad, to send\n  arbitrary data. For instance, if there is a filter that publishes event\n  information, it'll be sent to the remote peer through the channel. There is no\n  API available for programmers to make use of this feature in the\n  WebRtcElement. DataChannels can be configured to provide the following:\n</p>\n<ul>\n  <li>\n    Reliable or partially reliable delivery of sent messages\n  </li>\n  <li>\n    In-order or out-of-order delivery of sent messages\n  </li>\n</ul>\n<p>\n  Unreliable, out-of-order delivery is equivalent to raw UDP semantics. The\n  message may make it, or it may not, and order is not important. However, the\n  channel can be configured to be <i>partially reliable</i> by specifying the\n  maximum number of retransmissions or setting a time limit for retransmissions:\n  the WebRTC stack will handle the acknowledgments and timeouts.\n</p>\n<p>\n  The possibility to create DataChannels in a WebRtcEndpoint must be explicitly\n  enabled when creating the endpoint, as this feature is disabled by default. If\n  this is the case, they can be created invoking the createDataChannel method.\n  The arguments for this method, all of them optional, provide the necessary\n  configuration:\n</p>\n<ul>\n  <li>\n    <code>label</code>: assigns a label to the DataChannel. This can help\n    identify each possible channel separately.\n  </li>\n  <li>\n    <code>ordered</code>: specifies if the DataChannel guarantees order, which\n    is the default mode. If maxPacketLifetime and maxRetransmits have not been\n    set, this enables reliable mode.\n  </li>\n  <li>\n    <code>maxPacketLifeTime</code>: The time window in milliseconds, during\n    which transmissions and retransmissions may take place in unreliable mode.\n    This forces unreliable mode, even if <code>ordered</code> has been\n    activated.\n  </li>\n  <li>\n    <code>maxRetransmits</code>: maximum number of retransmissions that are\n    attempted in unreliable mode. This forces unreliable mode, even if\n    <code>ordered</code> has been activated.\n  </li>\n  <li>\n    <code>Protocol</code>: Name of the subprotocol used for data communication.\n  </li>\n</ul>\n      ",
      "extends": "BaseRtpEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "recvonly",
            "doc": "Single direction, receive-only endpoint",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          },
          {
            "name": "sendonly",
            "doc": "Single direction, send-only endpoint",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          },
          {
            "name": "useDataChannels",
            "doc": "Activate data channels support",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          },
          {
            "name": "certificateKeyType",
            "doc": "Define the type of the certificate used in dtls",
            "type": "CertificateKeyType",
            "optional": true,
            "defaultValue": "RSA"
          }
        ],
        "doc": "Builder for the :rom:cls:`WebRtcEndpoint`"
      },
      "properties": [
        {
          "name": "externalAddress",
          "doc": "External (public) IP address of the media server.\n<p>\n  If you know what will be the external or public IP address of the media server\n  (e.g. because your deployment has an static IP), you can specify it here.\n  Doing so has the advantage of not needing to configure STUN/TURN for the media\n  server.\n</p>\n<p>\n  STUN/TURN are needed only when the media server sits behind a NAT and needs to\n  find out its own external IP address. However, if you set a static external IP\n  address with this parameter, then there is no need for the STUN/TURN\n  auto-discovery.\n</p>\n<p>\n  The effect of this parameter is that ALL local ICE candidates that are\n  gathered (for WebRTC) will contain the provided external IP address instead of\n  the local one.\n</p>\n<p>\n  <code>externalAddress</code> is an IPv4 or IPv6 address.\n</p>\n<p>Examples:</p>\n<ul>\n  <li><code>externalAddress=10.70.35.2</code></li>\n  <li><code>externalAddress=2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></li>\n</ul>\n          ",
          "type": "String"
        },
        {
          "name": "networkInterfaces",
          "doc": "Local network interfaces used for ICE gathering.\n<p>\n  If you know which network interfaces should be used to perform ICE (for WebRTC\n  connectivity), you can define them here. Doing so has several advantages:\n</p>\n<ul>\n  <li>\n    The WebRTC ICE gathering process will be much quicker. Normally, it needs to\n    gather local candidates for all of the network interfaces, but this step can\n    be made faster if you limit it to only the interface that you know will\n    work.\n  </li>\n  <li>\n    It will ensure that the media server always decides to use the correct\n    network interface. With WebRTC ICE gathering it's possible that, under some\n    circumstances (in systems with virtual network interfaces such as\n    <code>docker0</code>) the ICE process ends up choosing the wrong local IP.\n  </li>\n</ul>\n<p>\n  <code>networkInterfaces</code> is a comma-separated list of network interface\n  names.\n</p>\n<p>Examples:</p>\n<ul>\n  <li><code>networkInterfaces=eth0</code></li>\n  <li><code>networkInterfaces=eth0,enp0s25</code></li>\n</ul>\n          ",
          "type": "String"
        },
        {
          "name": "stunServerAddress",
          "doc": "STUN server IP address.\n<p>The ICE process uses STUN to punch holes through NAT firewalls.</p>\n<p>\n  <code>stunServerAddress</code> MUST be an IP address; domain names are NOT\n  supported.\n</p>\n<p>\n  You need to use a well-working STUN server. Use this to check if it works:<br />\n  https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/<br />\n  From that check, you should get at least one Server-Reflexive Candidate (type\n  <code>srflx</code>).\n</p>\n          ",
          "type": "String"
        },
        {
          "name": "stunServerPort",
          "doc": "Port of the STUN server",
          "type": "int"
        },
        {
          "name": "turnUrl",
          "doc": "TURN server URL.\n<p>\n  When STUN is not enough to open connections through some NAT firewalls, using\n  TURN is the remaining alternative.\n</p>\n<p>\n  Note that TURN is a superset of STUN, so you don't need to configure STUN if\n  you are using TURN.\n</p>\n<p>The provided URL should follow one of these formats:</p>\n<ul>\n  <li><code>user:password@ipaddress:port</code></li>\n  <li>\n    <code>user:password@ipaddress:port?transport=[udp|tcp|tls]</code>\n  </li>\n</ul>\n<p>\n  <code>ipaddress</code> MUST be an IP address; domain names are NOT supported.<br />\n  <code>transport</code> is OPTIONAL. Possible values: udp, tcp, tls. Default: udp.\n</p>\n<p>\n  You need to use a well-working TURN server. Use this to check if it works:<br />\n  https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/<br />\n  From that check, you should get at least one Server-Reflexive Candidate (type\n  <code>srflx</code>) AND one Relay Candidate (type <code>relay</code>).\n</p>\n          ",
          "type": "String"
        },
        {
          "name": "ICECandidatePairs",
          "doc": "the ICE candidate pair (local and remote candidates) used by the ice library for each stream.",
          "type": "IceCandidatePair[]",
          "readOnly": true
        },
        {
          "name": "IceConnectionState",
          "doc": "the ICE connection state for all the connections.",
          "type": "IceConnection[]",
          "readOnly": true
        }
      ],
      "methods": [
        {
          "params": [],
          "name": "gatherCandidates",
          "doc": "Start the gathering of ICE candidates.\n<p>\n  It must be called after <code>SdpEndpoint::generateOffer</code> or\n  <code>SdpEndpoint::processOffer</code> for <strong>Trickle ICE</strong>. If\n  invoked before generating or processing an SDP offer, the candidates gathered\n  will be added to the SDP processed.\n</p>\n          "
        },
        {
          "params": [
            {
              "name": "candidate",
              "doc": "Remote ICE candidate",
              "type": "IceCandidate"
            }
          ],
          "name": "addIceCandidate",
          "doc": "Process an ICE candidate sent by the remote peer of the connection."
        },
        {
          "params": [
            {
              "name": "label",
              "doc": "Channel's label",
              "type": "String",
              "optional": true,
              "defaultValue": ""
            },
            {
              "name": "ordered",
              "doc": "If the data channel should guarantee order or not. If true, and maxPacketLifeTime and maxRetransmits have not been provided, reliable mode is activated.",
              "type": "boolean",
              "optional": true,
              "defaultValue": true
            },
            {
              "name": "maxPacketLifeTime",
              "doc": "The time window (in milliseconds) during which transmissions and retransmissions may take place in unreliable mode.\nNote that this forces unreliable mode, even if <code>ordered</code> has been activated.\n              ",
              "type": "int",
              "optional": true,
              "defaultValue": -1
            },
            {
              "name": "maxRetransmits",
              "doc": "maximum number of retransmissions that are attempted in unreliable mode.\nNote that this forces unreliable mode, even if <code>ordered</code> has been activated.\n              ",
              "type": "int",
              "optional": true,
              "defaultValue": -1
            },
            {
              "name": "protocol",
              "doc": "Name of the subprotocol used for data communication",
              "type": "String",
              "optional": true,
              "defaultValue": ""
            }
          ],
          "name": "createDataChannel",
          "doc": "Create a new data channel, if data channels are supported.\n<p>\n  Being supported means that the WebRtcEndpoint has been created with data\n  channel support, the client also supports data channels, and they have been\n  negotiated in the SDP exchange. Otherwise, the method throws an exception,\n  indicating that the operation is not possible.\n</p>\n<p>\n  Data channels can work in either unreliable mode (analogous to User Datagram\n  Protocol or UDP) or reliable mode (analogous to Transmission Control Protocol\n  or TCP). The two modes have a simple distinction:\n</p>\n<ul>\n  <li>\n    Reliable mode guarantees the transmission of messages and also the order in\n    which they are delivered. This takes extra overhead, thus potentially making\n    this mode slower.\n  </li>\n  <li>\n    Unreliable mode does not guarantee every message will get to the other side\n    nor what order they get there. This removes the overhead, allowing this mode\n    to work much faster.\n  </li>\n</ul>\n<p>If data channels are not supported, this method throws an exception.</p>\n          "
        },
        {
          "params": [
            {
              "name": "channelId",
              "doc": "The channel identifier",
              "type": "int"
            }
          ],
          "name": "closeDataChannel",
          "doc": "Closes an open data channel"
        }
      ],
      "events": [
        "OnIceCandidate",
        "IceCandidateFound",
        "OnIceGatheringDone",
        "IceGatheringDone",
        "OnIceComponentStateChanged",
        "IceComponentStateChange",
        "OnDataChannelOpened",
        "DataChannelOpen",
        "OnDataChannelClosed",
        "DataChannelClose",
        "NewCandidatePairSelected"
      ]
    }
  ],
  "complexTypes": [
    {
      "typeFormat": "ENUM",
      "values": [
        "WEBM",
        "MKV",
        "MP4",
        "WEBM_VIDEO_ONLY",
        "WEBM_AUDIO_ONLY",
        "MKV_VIDEO_ONLY",
        "MKV_AUDIO_ONLY",
        "MP4_VIDEO_ONLY",
        "MP4_AUDIO_ONLY",
        "JPEG_VIDEO_ONLY",
        "KURENTO_SPLIT_RECORDER"
      ],
      "name": "MediaProfileSpecType",
      "doc": "Media Profile.\n\nCurrently WEBM, MKV, MP4 and JPEG are supported."
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "AES_128_CM_HMAC_SHA1_32",
        "AES_128_CM_HMAC_SHA1_80",
        "AES_256_CM_HMAC_SHA1_32",
        "AES_256_CM_HMAC_SHA1_80"
      ],
      "name": "CryptoSuite",
      "doc": "Describes the encryption and authentication algorithms"
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "key",
          "doc": "<p>Master key and salt (plain text)</p>\n          <p>\n          This field provides the the cryptographic master key appended with the master salt, in plain text format. This allows to provide a key that is composed of readable ASCII characters.\n          </p>\n          <p>\n          The expected length of the key (as provided to this parameter) is determined by the crypto-suite for which the key applies (30 characters for AES_CM_128, 46 characters for AES_CM_256). If the length does not match the expected value, the key will be considered invalid.\n          </p>\n          <p>\n          If no key is provided, a random one will be generated using the `getrandom` system call.\n          </p>",
          "type": "String",
          "optional": true
        },
        {
          "name": "keyBase64",
          "doc": "<p>Master key and salt (base64 encoded)</p>\n          <p>\n          This field provides the cryptographic master key appended with the master salt, encoded in base64. This allows to provide a binary key that is not limited to the ASCII character set.\n          </p>\n          <p>\n          The expected length of the key (after being decoded from base64) is determined by the crypto-suite for which the key applies (30 bytes for AES_CM_128, 46 bytes for AES_CM_256). If the length does not match the expected value, the key will be considered invalid.\n          </p>\n          <p>\n          If no key is provided, a random one will be generated using the `getrandom` system call.\n          </p>",
          "type": "String",
          "optional": true
        },
        {
          "name": "crypto",
          "doc": "Selects the cryptographic suite to be used. For available values, please see the CryptoSuite enum.",
          "type": "CryptoSuite",
          "optional": true
        }
      ],
      "name": "SDES",
      "doc": "Security Descriptions for Media Streams"
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "isSeekable",
          "doc": "Seek is possible in video source",
          "type": "boolean"
        },
        {
          "name": "seekableInit",
          "doc": "First video position to do seek in ms",
          "type": "int64"
        },
        {
          "name": "seekableEnd",
          "doc": "Last video position to do seek in ms",
          "type": "int64"
        },
        {
          "name": "duration",
          "doc": "Video duration in ms",
          "type": "int64"
        }
      ],
      "name": "VideoInfo",
      "doc": ""
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "candidate",
          "doc": "The candidate-attribute as defined in section 15.1 of ICE (rfc5245).",
          "type": "String"
        },
        {
          "name": "sdpMid",
          "doc": "If present, this contains the identifier of the 'media stream identification'.",
          "type": "String"
        },
        {
          "name": "sdpMLineIndex",
          "doc": "The index (starting at zero) of the m-line in the SDP this candidate is associated with.",
          "type": "int"
        }
      ],
      "name": "IceCandidate",
      "doc": "IceCandidate representation based on <code>RTCIceCandidate</code> interface.\n@see https://www.w3.org/TR/2018/CR-webrtc-20180927/#rtcicecandidate-interface"
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "DISCONNECTED",
        "GATHERING",
        "CONNECTING",
        "CONNECTED",
        "READY",
        "FAILED"
      ],
      "name": "IceComponentState",
      "doc": "States of an ICE component."
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "streamID",
          "doc": "Stream ID of the ice connection",
          "type": "String"
        },
        {
          "name": "componentID",
          "doc": "Component ID of the ice connection",
          "type": "int"
        },
        {
          "name": "localCandidate",
          "doc": "The local candidate used by the ice library.",
          "type": "String"
        },
        {
          "name": "remoteCandidate",
          "doc": "The remote candidate used by the ice library.",
          "type": "String"
        }
      ],
      "name": "IceCandidatePair",
      "doc": "The ICE candidate pair used by the ice library, for a certain stream."
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "String"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ],
      "name": "IceConnection",
      "doc": "The ICE connection state for a certain stream and component."
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "RSA",
        "ECDSA"
      ],
      "name": "CertificateKeyType",
      "doc": "."
    }
  ],
  "events": [
    {
      "properties": [
        {
          "name": "mediaType",
          "doc": "The media stream",
          "type": "MediaType"
        }
      ],
      "extends": "Media",
      "name": "OnKeySoftLimit",
      "doc": "Fired when encryption is used and any stream reached the soft key usage limit, which means it will expire soon."
    },
    {
      "properties": [
        {
          "name": "candidate",
          "doc": "New local candidate",
          "type": "IceCandidate"
        }
      ],
      "extends": "Media",
      "name": "OnIceCandidate",
      "doc": "Notifies a new local candidate.\nThese candidates should be sent to the remote peer, to complete the ICE negotiation process.\n@deprecated Use <code>IceCandidateFound</code> instead.\n      "
    },
    {
      "properties": [
        {
          "name": "candidate",
          "doc": "New local candidate",
          "type": "IceCandidate"
        }
      ],
      "extends": "Media",
      "name": "IceCandidateFound",
      "doc": "Notifies a new local candidate.\nThese candidates should be sent to the remote peer, to complete the ICE negotiation process.\n      "
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "OnIceGatheringDone",
      "doc": "Event fired when al ICE candidates have been gathered.\n@deprecated Use <code>IceGatheringDone</code> instead.\n      "
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "IceGatheringDone",
      "doc": "Event fired when al ICE candidates have been gathered."
    },
    {
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "int"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ],
      "extends": "Media",
      "name": "OnIceComponentStateChanged",
      "doc": "Event fired when and ICE component state changes.\nSee :rom:cls:`IceComponentState` for a list of possible states.\n@deprecated Use <code>IceComponentStateChange</code> instead.\n      "
    },
    {
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "int"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ],
      "extends": "Media",
      "name": "IceComponentStateChange",
      "doc": "Event fired when and ICE component state changes.\nSee :rom:cls:`IceComponentState` for a list of possible states.\n      "
    },
    {
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ],
      "extends": "Media",
      "name": "OnDataChannelOpened",
      "doc": "Event fired when a new data channel is created.\n@deprecated Use <code>DataChannelOpen</code> instead.\n      "
    },
    {
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ],
      "extends": "Media",
      "name": "DataChannelOpen",
      "doc": "Event fired when a new data channel is created."
    },
    {
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ],
      "extends": "Media",
      "name": "OnDataChannelClosed",
      "doc": "Event fired when a data channel is closed.\n@deprecated Use <code>DataChannelClose</code> instead.\n      "
    },
    {
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ],
      "extends": "Media",
      "name": "DataChannelClose",
      "doc": "Event fired when a data channel is closed."
    },
    {
      "properties": [
        {
          "name": "candidatePair",
          "doc": "The new pair of candidates",
          "type": "IceCandidatePair"
        }
      ],
      "extends": "Media",
      "name": "NewCandidatePairSelected",
      "doc": "Event fired when a new pair of ICE candidates is used by the ICE library.\nThis could also happen in the middle of a session, though not likely.\n      "
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "Recording",
      "doc": "Fired when the recoding effectively starts. ie: Media is received by the recorder and record method has been called."
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "Paused",
      "doc": "@deprecated</br>Fired when the recorder goes to pause state"
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "Stopped",
      "doc": "@deprecated</br>Fired when the recorder has been stopped and all the media has been written to storage."
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "EndOfStream",
      "doc": "Event raised when the stream that the element sends out is finished."
    }
  ]
}
